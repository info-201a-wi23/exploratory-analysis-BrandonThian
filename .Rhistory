# This is a file to handle global data.
# Feel free to add initialization code for global here.
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
# Turn off scientific notation
options(scipen = 999)
# Load csv data and combine them.
# Data source: https://www.uscis.gov/tools/reports-and-studies/h-1b-employer-data-hub/h-1b-employer-data-hub-files
# Data year range definition. Currently, we use from 2018 to 2022.
data_years <- c(2018:2022)
# The header column is slightly different each year, so we need to unify them.
data_columns <- c(
"Year", "Employer", "Initial.Approval", "Initial.Denial", "Continuing.Approval", "Continuing.Denial",
"NAICS", "Tax.ID", "State", "City", "ZIP"
)
# Initialize np_data with an empty data frame
np_data <- NULL
# Load each data and merge them
for (year in data_years) {
np <- read.csv(
paste0("https://www.uscis.gov/sites/default/files/document/data/h1b_datahubexport-", year, ".csv"),
stringsAsFactors = FALSE,
col.names = data_columns,
)
# Remove comma from integer fields
np$Initial.Approval <- as.numeric(gsub(",", "", as.character(np$Initial.Approval)))
np$Initial.Denial <- as.numeric(gsub(",", "", as.character(np$Initial.Denial)))
np$Continuing.Approval <- as.numeric(gsub(",", "", as.character(np$Continuing.Approval)))
np$Continuing.Denial <- as.numeric(gsub(",", "", as.character(np$Continuing.Denial)))
if (is.null(np_data)) {
np_data <- np
} else {
np_data <- full_join(np_data, np)
}
}
# Definition of NAICS codes.
# Data source: https://www.census.gov/naics/
np_naics <- data.frame(
"NAICS" = c(
11, 21, 22,
23, 31, 32,
33, 42, 44,
45, 48, 49,
51, 52, 53,
54, 55, 56,
61, 62, 71,
72, 81, 92,
99
),
"Sector" = c(
"Agriculture, Forestry, Fishing and Hunting", "Mining", "Utilities",
"Construction", "Manufacturing", "Manufacturing",
"Manufacturing", "Wholesale Trade", "Retail Trade",
"Retail Trade", "Transportation and Warehousing", "Transportation and Warehousing",
"Information", "Finance and Insurance	", "Real Estate Rental and Leasing",
"Professional, Scientific, and Technical Services", "Management of Companies and Enterprises", "Administrative, Support, Waste, and Remediation",
"Educational Services", "Health Care and Social Assistance", "Arts, Entertainment, and Recreation",
"Accommodation and Food Services", "Other Services (except Public Administration)", "Public Administration",
"Etc"
),
stringsAsFactors = FALSE
)
# Remove unnecessary variables to avoid complicated team collaboration.
rm(data_columns)
rm(year)
rm(np)
# Load state abbreviation file
state_abbreviations <- read.csv("https://www.thespreadsheetguru.com/s/50-States.csv", stringsAsFactors = FALSE)
state_abbreviations$State <- tolower(state_abbreviations$State)
# These are global variables.
# Please don't change the variables directly. (except for the Summary Information section)
# Otherwise, others might get unexpected values after they changed.
#
# np_data    : The entire united data frame.
# np_naics   : NAICS code directory. (NAICS: code, Sector: Job sector explanation)
# data_years : A list of years in the data frame.
# Load a duplicate data frame to prevent overwriting the original dataframe
df <- np_data
# Selecting only Employer and Year columns
df <- df %>%
select(Employer, State)
# Remove duplicates
df <- unique(df)
# Count number of employers (sponsors) by state
total_sponsors_by_state <- df %>%
group_by(State) %>%
summarize(number_per_state = n())
# Load state shapefile
state_shape <- map_data("state")
# Join state_shape with state_abbreviations
state_shape <- left_join(state_shape, state_abbreviations, by = c("region" = "State"))
# Join total_sponors_by_state with state_shape
total_sponsors_by_state <- left_join(total_sponsors_by_state, state_shape, by = c("State" = "Abbr"))
View(total_sponsors_by_state)
# Load blank theme for map
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "white",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
library(scales)
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "white",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "black",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State from 2018 to 2022', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "red",
high = "green",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State from 2018 to 2022', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "orange",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of Sponsors by US State from 2018 to 2022', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of H1-B Sponsors by US State from 2020 to 2022', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
# Load a duplicate data frame to prevent overwriting the original dataframe
df <- np_data
# Selecting only Employer and Year columns
df <- df %>%
select(Employer, State)
# This is a file to handle global data.
# Feel free to add initialization code for global here.
library(dplyr)
library(ggplot2)
library(maps)
library(mapproj)
library(scales)
# Turn off scientific notation
options(scipen = 999)
# Load csv data and combine them.
# Data source: https://www.uscis.gov/tools/reports-and-studies/h-1b-employer-data-hub/h-1b-employer-data-hub-files
# Data year range definition. Currently, we use from 2020 to 2022.
data_years <- c(2020:2022)
# The header column is slightly different each year, so we need to unify them.
data_columns <- c(
"Year", "Employer", "Initial.Approval", "Initial.Denial", "Continuing.Approval", "Continuing.Denial",
"NAICS", "Tax.ID", "State", "City", "ZIP"
)
# Initialize np_data with an empty data frame
np_data <- NULL
# Load each data and merge them
for (year in data_years) {
np <- read.csv(
paste0("https://www.uscis.gov/sites/default/files/document/data/h1b_datahubexport-", year, ".csv"),
stringsAsFactors = FALSE,
col.names = data_columns,
)
# Remove comma from integer fields
np$Initial.Approval <- as.numeric(gsub(",", "", as.character(np$Initial.Approval)))
np$Initial.Denial <- as.numeric(gsub(",", "", as.character(np$Initial.Denial)))
np$Continuing.Approval <- as.numeric(gsub(",", "", as.character(np$Continuing.Approval)))
np$Continuing.Denial <- as.numeric(gsub(",", "", as.character(np$Continuing.Denial)))
if (is.null(np_data)) {
np_data <- np
} else {
np_data <- full_join(np_data, np)
}
}
# Definition of NAICS codes.
# Data source: https://www.census.gov/naics/
np_naics <- data.frame(
"NAICS" = c(
11, 21, 22,
23, 31, 32,
33, 42, 44,
45, 48, 49,
51, 52, 53,
54, 55, 56,
61, 62, 71,
72, 81, 92,
99
),
"Sector" = c(
"Agriculture, Forestry, Fishing and Hunting", "Mining", "Utilities",
"Construction", "Manufacturing", "Manufacturing",
"Manufacturing", "Wholesale Trade", "Retail Trade",
"Retail Trade", "Transportation and Warehousing", "Transportation and Warehousing",
"Information", "Finance and Insurance", "Real Estate Rental and Leasing",
"Professional, Scientific, and Technical Services", "Management of Companies and Enterprises", "Administrative, Support, Waste, and Remediation",
"Educational Services", "Health Care and Social Assistance", "Arts, Entertainment, and Recreation",
"Accommodation and Food Services", "Other Services (except Public Administration)", "Public Administration",
"Etc"
),
stringsAsFactors = FALSE
)
# Remove unnecessary variables to avoid complicated team collaboration.
rm(data_columns)
rm(year)
rm(np)
# Load state abbreviation file
state_abbreviations <- read.csv("https://www.thespreadsheetguru.com/s/50-States.csv", stringsAsFactors = FALSE)
state_abbreviations$State <- tolower(state_abbreviations$State)
# These are global variables.
# Please don't change the variables directly. (except for the Summary Information section)
# Otherwise, others might get unexpected values after they changed.
#
# np_data    : The entire united data frame.
# np_naics   : NAICS code directory. (NAICS: code, Sector: Job sector explanation)
# data_years : A list of years in the data frame.
# Load a duplicate data frame to prevent overwriting the original dataframe
df <- np_data
# Selecting only Employer and Year columns
df <- df %>%
select(Employer, State)
# Remove duplicates
df <- unique(df)
# Count number of employers (sponsors) by state
total_sponsors_by_state <- df %>%
group_by(State) %>%
summarize(number_per_state = n())
# Load state shapefile
state_shape <- map_data("state")
# Join state_shape with state_abbreviations
state_shape <- left_join(state_shape, state_abbreviations, by = c("region" = "State"))
# Join total_sponors_by_state with state_shape
total_sponsors_by_state <- left_join(total_sponsors_by_state, state_shape, by = c("State" = "Abbr"))
# Load blank theme for map
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Plotting map
ggplot(total_sponsors_by_state) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = number_per_state)) +
scale_fill_continuous(low = "yellow",
high = "red",
labels = label_number_si()) +
labs(title = 'Number of H1-B Sponsors by US State from 2020 to 2022', fill = 'Number of Sponsors') +
coord_map() +
blank_theme
